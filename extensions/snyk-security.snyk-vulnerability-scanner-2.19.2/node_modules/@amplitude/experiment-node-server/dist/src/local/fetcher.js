"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlagConfigFetcher = void 0;
const experiment_core_1 = require("@amplitude/experiment-core");
const version_1 = require("../../gen/version");
const http_1 = require("../transport/http");
const config_1 = require("../types/config");
const logger_1 = require("../util/logger");
const FLAG_CONFIG_TIMEOUT = 5000;
class FlagConfigFetcher {
    constructor(apiKey, httpClient, serverUrl = config_1.LocalEvaluationDefaults.serverUrl, debug = false) {
        this.apiKey = apiKey;
        this.serverUrl = serverUrl;
        this.flagApi = new experiment_core_1.SdkFlagApi(apiKey, serverUrl, new http_1.WrapperClient(httpClient));
        this.logger = new logger_1.ConsoleLogger(debug);
    }
    /**
     * Fetch local evaluation mode flag configs from the Experiment API server.
     * These flag configs can be used to perform local evaluation.
     *
     * @returns The local evaluation mode flag configs for the initialized
     * environment
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const flags = this.flagApi.getFlags({
                libraryName: 'experiment-node-server',
                libraryVersion: version_1.version,
                evaluationMode: 'local',
                timeoutMillis: FLAG_CONFIG_TIMEOUT,
            });
            if (this.receiver) {
                this.receiver(JSON.stringify(flags));
            }
            return flags;
        });
    }
    setRawReceiver(rawReceiver) {
        this.receiver = rawReceiver;
    }
}
exports.FlagConfigFetcher = FlagConfigFetcher;
