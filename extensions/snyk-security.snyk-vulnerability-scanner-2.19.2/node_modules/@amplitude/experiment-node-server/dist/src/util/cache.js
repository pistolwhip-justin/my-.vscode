"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cache = void 0;
class ListNode {
    constructor(data) {
        this.prev = undefined;
        this.next = undefined;
        this.data = data;
    }
}
class Cache {
    constructor(capacity, ttlMillis) {
        this.capacity = capacity;
        this.ttlMillis = ttlMillis;
        this.cache = new Map();
        this.head = undefined;
        this.tail = undefined;
    }
    put(key, value) {
        if (this.cache.has(key)) {
            this.removeFromList(key);
        }
        else if (this.cache.size >= this.capacity) {
            this.evictLRU();
        }
        const cacheItem = {
            key,
            value,
            createdAt: Date.now(),
        };
        const node = new ListNode(cacheItem);
        this.cache.set(key, node);
        this.insertToList(node);
    }
    get(key) {
        const node = this.cache.get(key);
        if (node) {
            const timeElapsed = Date.now() - node.data.createdAt;
            if (timeElapsed > this.ttlMillis) {
                this.remove(key);
                return undefined;
            }
            this.removeFromList(key);
            this.insertToList(node);
            return node.data.value;
        }
        return undefined;
    }
    remove(key) {
        this.removeFromList(key);
        this.cache.delete(key);
    }
    clear() {
        this.cache.clear();
        this.head = undefined;
        this.tail = undefined;
    }
    evictLRU() {
        if (this.head) {
            this.remove(this.head.data.key);
        }
    }
    removeFromList(key) {
        const node = this.cache.get(key);
        if (node) {
            if (node.prev) {
                node.prev.next = node.next;
            }
            else {
                this.head = node.next;
            }
            if (node.next) {
                node.next.prev = node.prev;
            }
            else {
                this.tail = node.prev;
            }
        }
    }
    insertToList(node) {
        if (this.tail) {
            this.tail.next = node;
            node.prev = this.tail;
            node.next = undefined;
            this.tail = node;
        }
        else {
            this.head = node;
            this.tail = node;
        }
    }
}
exports.Cache = Cache;
