"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeSettings = void 0;
const commands_1 = require("../common/constants/commands");
const views_1 = require("../common/constants/views");
class CodeSettings {
    constructor(contextService, config, openerService, commandExecutor) {
        this.contextService = contextService;
        this.config = config;
        this.openerService = openerService;
        this.commandExecutor = commandExecutor;
        this.sleep = (duration) => new Promise(resolve => setTimeout(resolve, duration));
    }
    async updateIsCodeEnabled(settings = undefined) {
        let codeEnabled = false;
        let localCodeEngineEnabled = false;
        try {
            settings = settings === undefined ? await this.getSastSettings() : settings;
            if (!settings) {
                return false;
            }
            codeEnabled = settings.sastEnabled;
            localCodeEngineEnabled = settings.localCodeEngine.enabled;
        }
        catch (e) {
            return false;
        }
        await this.contextService.setContext(views_1.SNYK_CONTEXT.CODE_ENABLED, codeEnabled);
        await this.contextService.setContext(views_1.SNYK_CONTEXT.CODE_LOCAL_ENGINE_ENABLED, localCodeEngineEnabled);
        return codeEnabled;
    }
    async enable(openBrowser = true) {
        let settings;
        try {
            settings = await this.getSastSettings();
            await this.updateIsCodeEnabled(settings);
        }
        catch (e) {
            if (e instanceof Error) {
                // Ignore potential command not found error during LS startup
            }
        }
        if (settings === null || settings === void 0 ? void 0 : settings.sastEnabled) {
            return true;
        }
        if (this.config.snykCodeUrl != null && openBrowser) {
            await this.openerService.openBrowserUrl(this.config.snykCodeUrl);
        }
        // Poll for changed settings (65 sec)
        for (let i = 2; i < 12; i += 1) {
            // eslint-disable-next-line no-await-in-loop
            await this.sleep(i * 1000);
            try {
                // eslint-disable-next-line no-await-in-loop
                settings = await this.getSastSettings();
                if ((settings === null || settings === void 0 ? void 0 : settings.sastEnabled) && !(settings === null || settings === void 0 ? void 0 : settings.localCodeEngine.enabled)) {
                    // eslint-disable-next-line no-await-in-loop
                    await this.updateIsCodeEnabled(settings);
                    return true;
                }
            }
            catch (e) {
                // Ignore potential command not found error during LS startup
            }
        }
        return false;
    }
    async getSastSettings() {
        return this.commandExecutor.executeCommand(commands_1.SNYK_GET_SETTINGS_SAST_ENABLED);
    }
}
exports.CodeSettings = CodeSettings;
//# sourceMappingURL=codeSettings.js.map