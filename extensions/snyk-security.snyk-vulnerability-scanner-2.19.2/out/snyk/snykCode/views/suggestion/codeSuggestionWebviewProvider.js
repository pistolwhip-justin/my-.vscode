"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeSuggestionWebviewProvider = void 0;
const lodash_1 = __importDefault(require("lodash"));
const path_1 = require("path");
const diff_1 = require("diff");
const marked_1 = require("marked");
const vscode = __importStar(require("vscode"));
const commands_1 = require("../../../common/constants/commands");
const views_1 = require("../../../common/constants/views");
const errorHandler_1 = require("../../../common/error/errorHandler");
const learn_1 = require("../../../common/messages/learn");
const nonce_1 = require("../../../common/views/nonce");
const webviewProvider_1 = require("../../../common/views/webviewProvider");
const analysis_1 = require("../../constants/analysis");
const error_1 = require("../../messages/error");
const analysisUtils_1 = require("../../utils/analysisUtils");
const patchUtils_1 = require("../../utils/patchUtils");
const issueUtils_1 = require("../../utils/issueUtils");
const fs_1 = require("fs");
const webviewPanelSerializer_1 = require("../../../snykCode/views/webviewPanelSerializer");
const instance_1 = require("../../../common/configuration/instance");
const featureFlags_1 = require("../../../common/constants/featureFlags");
class CodeSuggestionWebviewProvider extends webviewProvider_1.WebviewProvider {
    constructor(window, context, logger, languages, workspace, learnService, commandExecutor) {
        super(context, logger);
        this.window = window;
        this.context = context;
        this.logger = logger;
        this.languages = languages;
        this.workspace = workspace;
        this.learnService = learnService;
        this.commandExecutor = commandExecutor;
    }
    activate() {
        this.context.addDisposables(this.window.registerWebviewPanelSerializer(views_1.SNYK_VIEW_SUGGESTION_CODE, new webviewPanelSerializer_1.WebviewPanelSerializer(this)));
    }
    get openIssueId() {
        var _a;
        return (_a = this.issue) === null || _a === void 0 ? void 0 : _a.id;
    }
    async postSuggestMessage(message) {
        var _a;
        await ((_a = this.panel) === null || _a === void 0 ? void 0 : _a.webview.postMessage(message));
    }
    async postLearnLessonMessage(issue) {
        try {
            if (this.panel) {
                const lesson = await this.learnService.getCodeLesson(issue);
                if (lesson) {
                    void this.postSuggestMessage({
                        type: 'setLesson',
                        args: { url: lesson.url, title: learn_1.messages.lessonButtonTitle },
                    });
                }
                else {
                    void this.postSuggestMessage({
                        type: 'setLesson',
                        args: null,
                    });
                }
            }
        }
        catch (e) {
            errorHandler_1.ErrorHandler.handle(e, this.logger, learn_1.messages.getLessonError);
        }
    }
    async showPanel(issue) {
        var _a;
        const isIgnoresEnabled = instance_1.configuration.getFeatureFlag(featureFlags_1.FEATURE_FLAGS.consistentIgnores);
        try {
            await this.focusSecondEditorGroup();
            if (this.panel) {
                this.panel.title = this.getTitle();
                this.panel.reveal(vscode.ViewColumn.Two, true);
            }
            else {
                this.panel = vscode.window.createWebviewPanel(views_1.SNYK_VIEW_SUGGESTION_CODE, this.getTitle(), {
                    viewColumn: vscode.ViewColumn.Two,
                    preserveFocus: true,
                }, this.getWebviewOptions());
                this.registerListeners();
            }
            this.panel.iconPath = vscode.Uri.joinPath(vscode.Uri.file(this.context.extensionPath), 'media', 'images', 'snyk-code.svg');
            // TODO: delete this when SNYK_GENERATE_ISSUE_DESCRIPTION command is in stable CLI.
            let html = '';
            if (issue.additionalData.details) {
                html = issue.additionalData.details;
            }
            else {
                html = (_a = (await this.commandExecutor.executeCommand(commands_1.SNYK_GENERATE_ISSUE_DESCRIPTION, issue.id))) !== null && _a !== void 0 ? _a : '';
            }
            const ideStylePath = vscode.Uri.joinPath(vscode.Uri.file(this.context.extensionPath), 'media', 'views', 'snykCode', 'suggestion', 'suggestionLS.css');
            const ideStyle = (0, fs_1.readFileSync)(ideStylePath.fsPath, 'utf8');
            const ideScriptPath = vscode.Uri.joinPath(vscode.Uri.file(this.context.extensionPath), 'out', 'snyk', 'snykCode', 'views', 'suggestion', 'codeSuggestionWebviewScriptLS.js');
            const ideScript = (0, fs_1.readFileSync)(ideScriptPath.fsPath, 'utf8');
            html = html.replace('${ideStyle}', '<style nonce=${nonce}>' + ideStyle + '</style>');
            html = html.replace('${ideScript}', '<script nonce=${nonce}>' + ideScript + '</script>');
            const nonce = (0, nonce_1.getNonce)();
            html = html.replaceAll('${nonce}', nonce);
            this.panel.webview.html = html;
            void this.postSuggestMessage({ type: 'set', args: this.mapToModel(issue) });
            void this.postLearnLessonMessage(issue);
            this.issue = issue;
        }
        catch (e) {
            errorHandler_1.ErrorHandler.handle(e, this.logger, error_1.messages.suggestionViewShowFailed);
        }
    }
    registerListeners() {
        if (!this.panel)
            return;
        this.panel.onDidDispose(() => this.onPanelDispose(), null, this.disposables);
        this.panel.onDidChangeViewState(() => this.checkVisibility(), undefined, this.disposables);
        // Handle messages from the webview
        this.panel.webview.onDidReceiveMessage((msg) => this.handleMessage(msg), undefined, this.disposables);
    }
    disposePanel() {
        super.disposePanel();
    }
    onPanelDispose() {
        super.onPanelDispose();
    }
    getWorkspaceFolderPath(filePath) {
        // get the workspace folders
        // look at the filepath and identify the folder that contains the filepath
        for (const folderPath of this.workspace.getWorkspaceFolders()) {
            if (filePath.startsWith(folderPath)) {
                return folderPath;
            }
        }
        throw new Error(`Unable to find workspace for: ${filePath}`);
    }
    mapToModel(issue) {
        const parsedDetails = marked_1.marked.parse(issue.additionalData.text);
        const showInlineIgnoresButton = instance_1.configuration.getFeatureFlag(featureFlags_1.FEATURE_FLAGS.snykCodeInlineIgnore);
        return {
            id: issue.id,
            title: issue.title,
            severity: lodash_1.default.capitalize(issue.severity),
            ...issue.additionalData,
            text: parsedDetails,
            hasAIFix: issue.additionalData.hasAIFix,
            filePath: issue.filePath,
            showInlineIgnoresButton,
        };
    }
    async handleMessage(message) {
        var _a;
        try {
            switch (message.type) {
                case 'openLocal': {
                    const { uri, cols, rows, suggestionUri } = message.args;
                    const localUriPath = (0, analysisUtils_1.getAbsoluteMarkerFilePath)(this.workspace, uri, suggestionUri);
                    const localUri = vscode.Uri.file(localUriPath);
                    const range = issueUtils_1.IssueUtils.createVsCodeRangeFromRange(rows, cols, this.languages);
                    await vscode.commands.executeCommand(commands_1.SNYK_OPEN_LOCAL_COMMAND, localUri, range);
                    break;
                }
                case 'openBrowser': {
                    const { url } = message.args;
                    await vscode.commands.executeCommand(commands_1.SNYK_OPEN_BROWSER_COMMAND, url);
                    break;
                }
                case 'ignoreIssue': {
                    const { lineOnly, rule, uri, cols, rows } = message.args;
                    const vscodeUri = vscode.Uri.file(uri);
                    const range = issueUtils_1.IssueUtils.createVsCodeRangeFromRange(rows, cols, this.languages);
                    await vscode.commands.executeCommand(commands_1.SNYK_IGNORE_ISSUE_COMMAND, {
                        uri: vscodeUri,
                        matchedIssue: {
                            message: message.args.message,
                            range,
                        },
                        ruleId: rule,
                        isFileIgnore: !lineOnly,
                    });
                    (_a = this.panel) === null || _a === void 0 ? void 0 : _a.dispose();
                    break;
                }
                case 'getAutofixDiffs': {
                    this.logger.info('Generating fixes');
                    const { suggestion } = message.args;
                    try {
                        const filePath = suggestion.filePath;
                        const folderPath = this.getWorkspaceFolderPath(filePath);
                        const relativePath = (0, path_1.relative)(folderPath, filePath);
                        const issueId = suggestion.id;
                        const diffs = await vscode.commands.executeCommand(commands_1.SNYK_CODE_FIX_DIFFS_COMMAND, folderPath, relativePath, issueId);
                        // todo(berkay.berabi): Here if suggestions are empty, we should post a different type of message that
                        // will show the user correct information, namely: we tried but no fixes available for now.
                        void this.postSuggestMessage({ type: 'setAutofixDiffs', args: { suggestion, diffs } });
                    }
                    catch (error) {
                        void this.postSuggestMessage({ type: 'setAutofixError', args: { suggestion } });
                    }
                    break;
                }
                case 'applyGitDiff': {
                    const { patch, filePath, fixId } = message.args;
                    const fileContent = (0, fs_1.readFileSync)(filePath, 'utf8');
                    const patchedContent = (0, diff_1.applyPatch)(fileContent, patch);
                    if (!patchedContent) {
                        throw Error('Failed to apply patch');
                    }
                    const edit = new vscode.WorkspaceEdit();
                    const editor = vscode.window.visibleTextEditors.find(editor => editor.document.uri.fsPath === filePath);
                    if (!editor) {
                        throw Error(`Editor with file not found: ${filePath}`);
                    }
                    const editorEndLine = editor.document.lineCount;
                    edit.replace(vscode.Uri.file(filePath), new vscode.Range(0, 0, editorEndLine, 0), patchedContent);
                    const success = await vscode.workspace.applyEdit(edit);
                    if (!success) {
                        throw Error('Failed to apply edit to workspace');
                    }
                    this.highlightAddedCode(filePath, patch);
                    this.setupCloseOnSave(filePath);
                    try {
                        await vscode.commands.executeCommand(commands_1.SNYK_CODE_SUBMIT_FIX_FEEDBACK, fixId, 'FIX_APPLIED');
                    }
                    catch (e) {
                        throw new Error('Error in submit fix feedback');
                    }
                    break;
                }
                default: {
                    throw new Error('Unknown message type');
                }
            }
        }
        catch (e) {
            errorHandler_1.ErrorHandler.handle(e, this.logger, error_1.messages.suggestionViewMessageHandlingFailed(JSON.stringify(message)));
        }
    }
    setupCloseOnSave(filePath) {
        vscode.workspace.onDidSaveTextDocument((e) => {
            var _a;
            if (e.uri.fsPath == filePath) {
                (_a = this.panel) === null || _a === void 0 ? void 0 : _a.dispose();
            }
        });
    }
    highlightAddedCode(filePath, diffData) {
        const highlightDecoration = vscode.window.createTextEditorDecorationType({
            // seems to work well with both dark and light backgrounds
            backgroundColor: 'rgba(0,255,0,0.3)',
        });
        const editor = vscode.window.visibleTextEditors.find(editor => editor.document.uri.fsPath === filePath);
        if (!editor) {
            return; // No open editor found with the target file
        }
        const decorationOptions = (0, patchUtils_1.generateDecorationOptions)(diffData, this.languages);
        if (decorationOptions.length === 0) {
            return;
        }
        editor.setDecorations(highlightDecoration, decorationOptions);
        const firstLine = decorationOptions[0].range.start.line;
        // scroll to first added line
        const line = editor.document.lineAt(firstLine);
        const range = line.range;
        editor.revealRange(range, vscode.TextEditorRevealType.InCenter);
        // remove highlight on any of:
        // - user types
        // - saves the doc
        // - after an amount of time
        const removeHighlights = () => {
            editor.setDecorations(highlightDecoration, []);
            listeners.forEach(listener => {
                if (listener instanceof vscode.Disposable)
                    listener.dispose();
                else
                    clearTimeout(listener);
            });
        };
        const documentEventHandler = (document) => {
            if (document.uri.fsPath == filePath) {
                removeHighlights();
            }
        };
        const listeners = [
            setTimeout(removeHighlights, 30000),
            vscode.workspace.onDidSaveTextDocument(documentEventHandler),
            vscode.workspace.onDidChangeTextDocument(e => documentEventHandler(e.document)),
        ];
    }
    getTitle() {
        return analysis_1.WEBVIEW_PANEL_SECURITY_TITLE;
    }
}
exports.CodeSuggestionWebviewProvider = CodeSuggestionWebviewProvider;
//# sourceMappingURL=codeSuggestionWebviewProvider.js.map