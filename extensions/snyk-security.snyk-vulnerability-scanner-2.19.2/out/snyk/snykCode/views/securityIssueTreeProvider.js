"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const instance_1 = require("../../common/configuration/instance");
const views_1 = require("../../common/constants/views");
const treeNode_1 = require("../../common/views/treeNode");
const issueTreeProvider_1 = require("./issueTreeProvider");
const featureFlags_1 = require("../../common/constants/featureFlags");
class CodeSecurityIssueTreeProvider extends issueTreeProvider_1.IssueTreeProvider {
    constructor(viewManagerService, contextService, codeService, configuration, languages, folderConfigs) {
        super(contextService, codeService, configuration, languages, true, folderConfigs);
        this.viewManagerService = viewManagerService;
        this.contextService = contextService;
        this.codeService = codeService;
        this.configuration = configuration;
        this.languages = languages;
        this.folderConfigs = folderConfigs;
        this.onDidChangeTreeData = this.viewManagerService.refreshCodeSecurityViewEmitter.event;
    }
    getRootChildren() {
        var _a;
        if (!((_a = instance_1.configuration.getFeaturesConfiguration()) === null || _a === void 0 ? void 0 : _a.codeSecurityEnabled)) {
            return [
                new treeNode_1.TreeNode({
                    text: views_1.SNYK_ANALYSIS_STATUS.CODE_SECURITY_DISABLED,
                }),
            ];
        }
        return super.getRootChildren();
    }
    getIssueDescriptionText(dir, issueCount) {
        return `${dir} - ${issueCount} ${issueCount === 1 ? 'issue' : 'issues'}`;
    }
    getIssueFoundText(nIssues, ignoredIssueCount) {
        if (nIssues > 0) {
            let text;
            if (nIssues === 1) {
                text = `${nIssues} issue found by Snyk`;
            }
            else {
                text = `✋ ${nIssues} issues found by Snyk`;
            }
            const isIgnoresEnabled = instance_1.configuration.getFeatureFlag(featureFlags_1.FEATURE_FLAGS.consistentIgnores);
            if (isIgnoresEnabled) {
                text += `, ${ignoredIssueCount} ignored`;
            }
            return text;
        }
        else {
            return '✅ Congrats! No issues found!';
        }
    }
}
exports.default = CodeSecurityIssueTreeProvider;
//# sourceMappingURL=securityIssueTreeProvider.js.map