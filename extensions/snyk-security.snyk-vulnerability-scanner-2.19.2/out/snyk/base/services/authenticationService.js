"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticationService = void 0;
const uuid_1 = require("uuid");
const commands_1 = require("../../common/constants/commands");
const languageServer_1 = require("../../common/constants/languageServer");
const views_1 = require("../../common/constants/views");
class AuthenticationService {
    constructor(contextService, baseModule, configuration, window, logger, clientAdapter, commands) {
        this.contextService = contextService;
        this.baseModule = baseModule;
        this.configuration = configuration;
        this.window = window;
        this.logger = logger;
        this.clientAdapter = clientAdapter;
        this.commands = commands;
    }
    async initiateLogin() {
        await this.contextService.setContext(views_1.SNYK_CONTEXT.LOGGEDIN, false);
        await this.contextService.setContext(views_1.SNYK_CONTEXT.AUTHENTICATING, true);
    }
    async initiateLogout() {
        await this.configuration.clearToken();
        await this.contextService.setContext(views_1.SNYK_CONTEXT.LOGGEDIN, false);
    }
    async setToken() {
        const token = await this.window.showInputBox({
            placeHolder: 'UUID for API Token or OAuth2 Token',
            password: true,
            validateInput: token => {
                const valid = this.validateToken(token);
                if (!valid) {
                    return 'The entered token has an invalid format.';
                }
            },
        });
        if (!token)
            return;
        await this.configuration.setToken(token);
        return await this.clientAdapter.getLanguageClient().sendNotification(languageServer_1.DID_CHANGE_CONFIGURATION_METHOD, {});
    }
    validateToken(token) {
        let valid = (0, uuid_1.validate)(token);
        if (valid)
            return true;
        // try to parse as json (oauth2 token)
        try {
            const oauthToken = JSON.parse(token);
            valid =
                oauthToken.access_token.length > 0 &&
                    Date.parse(oauthToken.expiry) > Date.now() &&
                    oauthToken.refresh_token.length > 0;
            this.logger.debug(`Token ${this.maskToken(token)} parsed`);
        }
        catch (e) {
            this.logger.warn(`Token ${this.maskToken(token)} is not a valid uuid or json string: ${e}`);
        }
        return valid;
    }
    maskToken(token) {
        return `${token.slice(0, 4)}****${token.slice(-4)}`;
    }
    async updateToken(token) {
        if (!token) {
            await this.initiateLogout();
        }
        else {
            if (!this.validateToken(token))
                return Promise.reject(new Error('The entered token has an invalid format.'));
            await this.configuration.setToken(token);
            await this.contextService.setContext(views_1.SNYK_CONTEXT.AUTHENTICATING, false);
            await this.contextService.setContext(views_1.SNYK_CONTEXT.LOGGEDIN, true);
            await this.contextService.setContext(views_1.SNYK_CONTEXT.AUTHENTICATION_METHOD_CHANGED, false);
            this.baseModule.loadingBadge.setLoadingBadge(false);
            await this.commands.executeCommand(commands_1.SNYK_WORKSPACE_SCAN_COMMAND);
        }
    }
}
exports.AuthenticationService = AuthenticationService;
//# sourceMappingURL=authenticationService.js.map