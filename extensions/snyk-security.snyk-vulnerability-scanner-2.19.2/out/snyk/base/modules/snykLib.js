"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = __importStar(require("lodash"));
const instance_1 = require("../../common/configuration/instance");
const general_1 = require("../../common/constants/general");
const views_1 = require("../../common/constants/views");
const errorHandler_1 = require("../../common/error/errorHandler");
const logger_1 = require("../../common/logger/logger");
const commands_1 = require("../../common/vscode/commands");
const baseSnykModule_1 = __importDefault(require("./baseSnykModule"));
const featureFlags_1 = require("../../common/constants/featureFlags");
class SnykLib extends baseSnykModule_1.default {
    constructor() {
        super(...arguments);
        // This function is called by commands, error handlers, etc.
        // We should avoid having duplicate parallel executions.
        this.runScan = _.debounce(this.runFullScan_.bind(this), general_1.DEFAULT_SCAN_DEBOUNCE_INTERVAL, { leading: true });
    }
    async runFullScan_() {
        await this.contextService.setContext(views_1.SNYK_CONTEXT.ERROR, false);
        this.loadingBadge.setLoadingBadge(false);
        const token = await instance_1.configuration.getToken();
        try {
            if (!token) {
                return;
            }
            logger_1.Logger.info('Starting full scan');
            await this.contextService.setContext(views_1.SNYK_CONTEXT.AUTHENTICATING, false);
            await this.contextService.setContext(views_1.SNYK_CONTEXT.LOGGEDIN, true);
            await this.codeSettings.updateIsCodeEnabled();
            if (!instance_1.configuration.getFeaturesConfiguration()) {
                return;
            }
            await this.user.identify(commands_1.vsCodeCommands);
        }
        catch (err) {
            await errorHandler_1.ErrorHandler.handleGlobal(err, logger_1.Logger, this.contextService, this.loadingBadge);
        }
    }
    async enableCode() {
        logger_1.Logger.info('Enabling Snyk Code');
        const wasEnabled = await this.codeSettings.enable();
        logger_1.Logger.info(wasEnabled ? 'Snyk Code was enabled' : 'Failed to enable Snyk Code');
    }
    async checkAdvancedMode() {
        await this.contextService.setContext(views_1.SNYK_CONTEXT.ADVANCED, instance_1.configuration.shouldShowAdvancedView);
    }
    async setupFeatureFlags() {
        const flags = [
            { flag: featureFlags_1.FEATURE_FLAGS.consistentIgnores, fallback: false },
            { flag: featureFlags_1.FEATURE_FLAGS.snykCodeInlineIgnore, fallback: true },
        ];
        const featureFlagResults = await Promise.allSettled(flags.map(({ flag, fallback }) => this.fetchFeatureFlagStatus(flag, fallback)));
        const fulfilledResults = featureFlagResults.filter((result) => result.status === 'fulfilled');
        fulfilledResults.forEach(({ value }) => {
            const { flag, isEnabled } = value;
            instance_1.configuration.setFeatureFlag(flag, isEnabled);
            logger_1.Logger.info(`Feature flag ${flag} is ${isEnabled ? 'enabled' : 'disabled'}`);
        });
        const rejectedResults = featureFlagResults.filter((result) => result.status === 'rejected');
        rejectedResults.forEach(({ reason }) => {
            logger_1.Logger.warn(`Failed to fetch feature flag: ${reason}`);
        });
    }
    async fetchFeatureFlagStatus(flag, fallback) {
        const isEnabled = await this.featureFlagService.fetchFeatureFlag(flag, fallback);
        return { flag, isEnabled };
    }
    async setWorkspaceContext(workspacePaths) {
        const workspaceFound = !!workspacePaths.length;
        await this.contextService.setContext(views_1.SNYK_CONTEXT.WORKSPACE_FOUND, workspaceFound);
    }
}
exports.default = SnykLib;
//# sourceMappingURL=snykLib.js.map