"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IacSuggestionWebviewProvider = void 0;
const vscode = __importStar(require("vscode"));
const commands_1 = require("../../../common/constants/commands");
const views_1 = require("../../../common/constants/views");
const errorHandler_1 = require("../../../common/error/errorHandler");
const nonce_1 = require("../../../common/views/nonce");
const webviewPanelSerializer_1 = require("../../../common/views/webviewPanelSerializer");
const webviewProvider_1 = require("../../../common/views/webviewProvider");
const error_1 = require("../../messages/error");
const fs_1 = require("fs");
// import { getAbsoluteMarkerFilePath } from '../../utils/analysisUtils';
// import { IssueUtils } from '../../utils/issueUtils';
// import { ICodeSuggestionWebviewProvider } from '../interfaces';
class IacSuggestionWebviewProvider extends webviewProvider_1.WebviewProvider {
    constructor(window, context, logger, languages, workspace, commandExecutor) {
        super(context, logger);
        this.window = window;
        this.context = context;
        this.logger = logger;
        this.languages = languages;
        this.workspace = workspace;
        this.commandExecutor = commandExecutor;
    }
    activate() {
        this.context.addDisposables(this.window.registerWebviewPanelSerializer(views_1.SNYK_VIEW_SUGGESTION_IAC, new webviewPanelSerializer_1.WebviewPanelSerializer(this)));
    }
    get openIssueId() {
        var _a;
        return (_a = this.issue) === null || _a === void 0 ? void 0 : _a.id;
    }
    async showPanel(issue) {
        var _a;
        try {
            await this.focusSecondEditorGroup();
            if (this.panel) {
                this.panel.reveal(vscode.ViewColumn.Two, true);
            }
            else {
                this.panel = vscode.window.createWebviewPanel(views_1.SNYK_VIEW_SUGGESTION_IAC, 'Snyk Configuration Issue', {
                    viewColumn: vscode.ViewColumn.Two,
                    preserveFocus: true,
                }, this.getWebviewOptions());
                this.registerListeners();
            }
            // TODO: delete this when SNYK_GENERATE_ISSUE_DESCRIPTION command is in stable CLI.
            let html = '';
            if (issue.additionalData.customUIContent) {
                html = issue.additionalData.customUIContent;
            }
            else {
                html = (_a = (await this.commandExecutor.executeCommand(commands_1.SNYK_GENERATE_ISSUE_DESCRIPTION, issue.id))) !== null && _a !== void 0 ? _a : '';
            }
            this.panel.webview.html = this.getHtmlFromLanguageServer(html);
            this.panel.iconPath = vscode.Uri.joinPath(vscode.Uri.file(this.context.extensionPath), 'media', 'images', 'snyk-iac.svg');
            await this.panel.webview.postMessage({ type: 'set', args: issue });
            this.issue = issue;
        }
        catch (e) {
            errorHandler_1.ErrorHandler.handle(e, this.logger, error_1.messages.suggestionViewShowFailed);
        }
    }
    getHtmlFromLanguageServer(html) {
        const nonce = (0, nonce_1.getNonce)();
        const ideStylePath = vscode.Uri.joinPath(vscode.Uri.file(this.context.extensionPath), 'media', 'views', 'snykCode', // TODO: check with design
        'suggestion', 'suggestionLS.css');
        const ideStyle = (0, fs_1.readFileSync)(ideStylePath.fsPath, 'utf8');
        // nonce-ideNonce is a placeholder defined in the Language Server
        // to be replaced with the local nonce in the <meta /> tag.
        html = html.replace(/nonce-ideNonce/g, `nonce-${nonce}`);
        // data-ide-style is a placeholder defined in the Language Server
        // to be replaced with the custom IDE styles.
        html = html.replace('<style nonce="ideNonce" data-ide-style></style>', `<style nonce="${nonce}">${ideStyle}</style>`);
        return html;
    }
    registerListeners() {
        if (!this.panel)
            return;
        this.panel.onDidDispose(() => this.onPanelDispose(), null, this.disposables);
        this.panel.onDidChangeViewState(() => this.checkVisibility(), undefined, this.disposables);
        // Handle messages from the webview
        this.panel.webview.onDidReceiveMessage(msg => this.handleMessage(msg), undefined, this.disposables);
    }
    disposePanel() {
        super.disposePanel();
    }
    onPanelDispose() {
        super.onPanelDispose();
    }
    async handleMessage(message) {
        try {
            const { type, value } = message;
            switch (type) {
                case 'openBrowser': {
                    await vscode.commands.executeCommand(commands_1.SNYK_OPEN_BROWSER_COMMAND, value);
                    break;
                }
                default: {
                    throw new Error('Unknown message type');
                }
            }
        }
        catch (e) {
            errorHandler_1.ErrorHandler.handle(e, this.logger, error_1.messages.suggestionViewShowFailed);
        }
    }
}
exports.IacSuggestionWebviewProvider = IacSuggestionWebviewProvider;
//# sourceMappingURL=iacSuggestionWebviewProvider.js.map