"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __importStar(require("vscode"));
const snykLib_1 = __importDefault(require("./base/modules/snykLib"));
const authenticationService_1 = require("./base/services/authenticationService");
const scanModeService_1 = require("./base/services/scanModeService");
const emptyTreeDataProvider_1 = require("./base/views/emptyTreeDataProvider");
const supportProvider_1 = require("./base/views/supportProvider");
const commandController_1 = require("./common/commands/commandController");
const instance_1 = require("./common/configuration/instance");
const snykConfiguration_1 = require("./common/configuration/snykConfiguration");
const commands_1 = require("./common/constants/commands");
const views_1 = require("./common/constants/views");
const errorHandler_1 = require("./common/error/errorHandler");
const errorReporter_1 = require("./common/error/errorReporter");
const experimentService_1 = require("./common/experiment/services/experimentService");
const languageServer_1 = require("./common/languageServer/languageServer");
const staticLsApi_1 = require("./common/languageServer/staticLsApi");
const logger_1 = require("./common/logger/logger");
const downloadService_1 = require("./common/services/downloadService");
const learnService_1 = require("./common/services/learnService");
const notificationService_1 = require("./common/services/notificationService");
const user_1 = require("./common/user");
const codeAction_1 = require("./common/vscode/codeAction");
const commands_2 = require("./common/vscode/commands");
const env_1 = require("./common/vscode/env");
const extensionContext_1 = require("./common/vscode/extensionContext");
const languageClient_1 = require("./common/vscode/languageClient");
const languages_1 = require("./common/vscode/languages");
const secretStorage_1 = __importDefault(require("./common/vscode/secretStorage"));
const textdocument_1 = require("./common/vscode/textdocument");
const theme_1 = require("./common/vscode/theme");
const uri_1 = require("./common/vscode/uri");
const window_1 = require("./common/vscode/window");
const workspace_1 = require("./common/vscode/workspace");
const configurationWatcher_1 = __importDefault(require("./common/watchers/configurationWatcher"));
const ignoreCommand_1 = require("./snykCode/codeActions/ignoreCommand");
const codeService_1 = require("./snykCode/codeService");
const codeSettings_1 = require("./snykCode/codeSettings");
const qualityIssueTreeProvider_1 = require("./snykCode/views/qualityIssueTreeProvider");
const securityIssueTreeProvider_1 = __importDefault(require("./snykCode/views/securityIssueTreeProvider"));
const codeSuggestionWebviewProvider_1 = require("./snykCode/views/suggestion/codeSuggestionWebviewProvider");
const iacService_1 = require("./snykIac/iacService");
const iacIssueTreeProvider_1 = __importDefault(require("./snykIac/views/iacIssueTreeProvider"));
const iacSuggestionWebviewProvider_1 = require("./snykIac/views/suggestion/iacSuggestionWebviewProvider");
const editorDecorator_1 = require("./snykOss/editor/editorDecorator");
const ossService_1 = require("./snykOss/ossService");
const ossDetailPanelProvider_1 = require("./snykOss/providers/ossDetailPanelProvider");
const ossVulnerabilityCountProvider_1 = require("./snykOss/providers/ossVulnerabilityCountProvider");
const ossVulnerabilityTreeProvider_1 = __importDefault(require("./snykOss/providers/ossVulnerabilityTreeProvider"));
const ossVulnerabilityCountService_1 = require("./snykOss/services/vulnerabilityCount/ossVulnerabilityCountService");
const featureFlagService_1 = require("./common/services/featureFlagService");
const diagnosticsService_1 = require("./common/services/diagnosticsService");
const CacheService_1 = require("./common/services/CacheService");
const general_1 = require("./common/constants/general");
class SnykExtension extends snykLib_1.default {
    async activate(vscodeContext) {
        extensionContext_1.extensionContext.setContext(vscodeContext);
        this.context = extensionContext_1.extensionContext;
        const snykConfiguration = await this.getSnykConfiguration();
        if (snykConfiguration) {
            await errorReporter_1.ErrorReporter.init(instance_1.configuration, snykConfiguration, extensionContext_1.extensionContext.extensionPath, env_1.vsCodeEnv, logger_1.Logger);
        }
        try {
            await this.initializeExtension(vscodeContext, snykConfiguration);
            this.configureGitHandlers();
        }
        catch (e) {
            errorHandler_1.ErrorHandler.handle(e, logger_1.Logger);
        }
    }
    configureGitHandlers() {
        var _a;
        // Get the Git extension
        const gitExtension = (_a = vscode.extensions.getExtension('vscode.git')) === null || _a === void 0 ? void 0 : _a.exports;
        if (!gitExtension) {
            return;
        }
        // Get the API from the Git extension
        const git = gitExtension.getAPI(1);
        // Check if there are any repositories
        const repositories = git === null || git === void 0 ? void 0 : git.repositories;
        if (!repositories || repositories.length === 0) {
            return;
        }
        const previousBranches = new Map();
        // Register event listener for changes in each repository
        repositories.forEach((repo) => {
            var _a;
            let previousBranch = (_a = repo.state.HEAD) === null || _a === void 0 ? void 0 : _a.name;
            previousBranches.set(repo, previousBranch);
            repo.state.onDidChange(async () => {
                var _a;
                const currentBranch = (_a = repo.state.HEAD) === null || _a === void 0 ? void 0 : _a.name;
                const storedPreviousBranch = previousBranches.get(repo);
                if (currentBranch !== storedPreviousBranch) {
                    await this.cacheService.clearCache(repo.rootUri.toString(), general_1.InMemory);
                    previousBranches.set(repo, currentBranch);
                }
            });
        });
    }
    async getSnykConfiguration() {
        try {
            return await snykConfiguration_1.SnykConfiguration.get(extensionContext_1.extensionContext.extensionPath, instance_1.configuration.isDevelopment);
        }
        catch (e) {
            errorHandler_1.ErrorHandler.handle(e, logger_1.Logger);
        }
    }
    async initializeExtension(vscodeContext, snykConfiguration) {
        // initialize context correctly
        // see package.json when each view is shown, based on context value
        await this.contextService.setContext(views_1.SNYK_CONTEXT.INITIALIZED, false);
        // default to true, as the check is async and can only be done after startup of LS
        // if set to true, the option to enable code is not shown in the initialization phase
        await this.contextService.setContext(views_1.SNYK_CONTEXT.CODE_ENABLED, true);
        // set the workspace context so that the text to add folders is only shown if really the case
        // initializing after LS startup and just before scan is too late
        const workspacePaths = workspace_1.vsCodeWorkspace.getWorkspaceFolders();
        await this.setWorkspaceContext(workspacePaths);
        this.user = await user_1.User.getAnonymous(this.context, logger_1.Logger);
        secretStorage_1.default.init(vscodeContext);
        this.configurationWatcher = new configurationWatcher_1.default(logger_1.Logger);
        this.notificationService = new notificationService_1.NotificationService(window_1.vsCodeWindow, commands_2.vsCodeCommands, instance_1.configuration, logger_1.Logger);
        this.statusBarItem.show();
        const languageClientAdapter = new languageClient_1.LanguageClientAdapter();
        this.authService = new authenticationService_1.AuthenticationService(this.contextService, this, instance_1.configuration, window_1.vsCodeWindow, logger_1.Logger, languageClientAdapter, commands_2.vsCodeCommands);
        this.learnService = new learnService_1.LearnService(commands_2.vsCodeCommands);
        this.cacheService = new CacheService_1.ClearCacheService(commands_2.vsCodeCommands);
        this.codeSettings = new codeSettings_1.CodeSettings(this.contextService, instance_1.configuration, this.openerService, commands_2.vsCodeCommands);
        this.scanModeService = new scanModeService_1.ScanModeService(this.contextService, instance_1.configuration);
        this.downloadService = new downloadService_1.DownloadService(this.context, instance_1.configuration, new staticLsApi_1.StaticLsApi(workspace_1.vsCodeWorkspace, instance_1.configuration, logger_1.Logger), window_1.vsCodeWindow, logger_1.Logger);
        this.experimentService = new experimentService_1.ExperimentService(this.user, logger_1.Logger, instance_1.configuration, snykConfiguration);
        this.languageServer = new languageServer_1.LanguageServer(this.user, instance_1.configuration, languageClientAdapter, workspace_1.vsCodeWorkspace, window_1.vsCodeWindow, this.authService, logger_1.Logger, this.downloadService);
        const codeSuggestionProvider = new codeSuggestionWebviewProvider_1.CodeSuggestionWebviewProvider(window_1.vsCodeWindow, extensionContext_1.extensionContext, logger_1.Logger, languages_1.vsCodeLanguages, workspace_1.vsCodeWorkspace, this.learnService, commands_2.vsCodeCommands);
        this.snykCode = new codeService_1.SnykCodeService(this.context, instance_1.configuration, codeSuggestionProvider, new codeAction_1.CodeActionAdapter(), this.codeActionKindAdapter, this.viewManagerService, workspace_1.vsCodeWorkspace, this.workspaceTrust, this.languageServer, languages_1.vsCodeLanguages, new diagnosticsService_1.DiagnosticsIssueProvider(), logger_1.Logger);
        const ossSuggestionProvider = new ossDetailPanelProvider_1.OssDetailPanelProvider(window_1.vsCodeWindow, extensionContext_1.extensionContext, logger_1.Logger, languages_1.vsCodeLanguages, workspace_1.vsCodeWorkspace, commands_2.vsCodeCommands);
        this.ossService = new ossService_1.OssService(extensionContext_1.extensionContext, instance_1.configuration, ossSuggestionProvider, new codeAction_1.CodeActionAdapter(), this.codeActionKindAdapter, this.viewManagerService, workspace_1.vsCodeWorkspace, this.workspaceTrust, this.languageServer, languages_1.vsCodeLanguages, new diagnosticsService_1.DiagnosticsIssueProvider(), logger_1.Logger);
        const iacSuggestionProvider = new iacSuggestionWebviewProvider_1.IacSuggestionWebviewProvider(window_1.vsCodeWindow, extensionContext_1.extensionContext, logger_1.Logger, languages_1.vsCodeLanguages, workspace_1.vsCodeWorkspace, commands_2.vsCodeCommands);
        this.iacService = new iacService_1.IacService(this.context, instance_1.configuration, iacSuggestionProvider, new codeAction_1.CodeActionAdapter(), this.codeActionKindAdapter, this.viewManagerService, workspace_1.vsCodeWorkspace, this.workspaceTrust, this.languageServer, languages_1.vsCodeLanguages, new diagnosticsService_1.DiagnosticsIssueProvider(), logger_1.Logger);
        this.commandController = new commandController_1.CommandController(this.openerService, this.authService, this.snykCode, this.iacService, this.ossService, this.scanModeService, workspace_1.vsCodeWorkspace, commands_2.vsCodeCommands, window_1.vsCodeWindow, this.languageServer, logger_1.Logger, instance_1.configuration, this.folderConfigs);
        this.registerCommands(vscodeContext);
        const codeSecurityIssueProvider = new securityIssueTreeProvider_1.default(this.viewManagerService, this.contextService, this.snykCode, instance_1.configuration, languages_1.vsCodeLanguages, this.folderConfigs);
        const codeQualityIssueProvider = new qualityIssueTreeProvider_1.CodeQualityIssueTreeProvider(this.viewManagerService, this.contextService, this.snykCode, instance_1.configuration, languages_1.vsCodeLanguages, this.folderConfigs);
        const securityCodeView = views_1.SNYK_VIEW_ANALYSIS_CODE_SECURITY;
        const codeQualityView = views_1.SNYK_VIEW_ANALYSIS_CODE_QUALITY;
        const codeSecurityTree = vscode.window.createTreeView(securityCodeView, {
            treeDataProvider: codeSecurityIssueProvider,
        });
        const codeQualityTree = vscode.window.createTreeView(codeQualityView, {
            treeDataProvider: codeQualityIssueProvider,
        });
        vscodeContext.subscriptions.push(vscode.window.registerTreeDataProvider(securityCodeView, codeSecurityIssueProvider), vscode.window.registerTreeDataProvider(codeQualityView, codeQualityIssueProvider), codeSecurityTree, codeQualityTree);
        vscodeContext.subscriptions.push(vscode.window.registerTreeDataProvider(views_1.SNYK_VIEW_SUPPORT, new supportProvider_1.SupportProvider()));
        const welcomeTree = vscode.window.createTreeView(views_1.SNYK_VIEW_WELCOME, {
            treeDataProvider: new emptyTreeDataProvider_1.EmptyTreeDataProvider(),
        });
        const codeEnablementTree = vscode.window.createTreeView(views_1.SNYK_VIEW_ANALYSIS_CODE_ENABLEMENT, {
            treeDataProvider: new emptyTreeDataProvider_1.EmptyTreeDataProvider(),
        });
        vscodeContext.subscriptions.push(codeEnablementTree);
        const ossIssueProvider = new ossVulnerabilityTreeProvider_1.default(this.viewManagerService, this.contextService, this.ossService, instance_1.configuration, languages_1.vsCodeLanguages, this.folderConfigs);
        const ossSecurityTree = vscode.window.createTreeView(views_1.SNYK_VIEW_ANALYSIS_OSS, {
            treeDataProvider: ossIssueProvider,
        });
        vscodeContext.subscriptions.push(vscode.window.registerTreeDataProvider(views_1.SNYK_VIEW_ANALYSIS_OSS, ossIssueProvider), ossSecurityTree);
        const iacIssueProvider = new iacIssueTreeProvider_1.default(this.viewManagerService, this.contextService, this.iacService, instance_1.configuration, languages_1.vsCodeLanguages, this.folderConfigs);
        const iacSecurityTree = vscode.window.createTreeView(views_1.SNYK_VIEW_ANALYSIS_IAC, {
            treeDataProvider: iacIssueProvider,
        });
        vscodeContext.subscriptions.push(vscode.window.registerTreeDataProvider(views_1.SNYK_VIEW_ANALYSIS_IAC, iacIssueProvider), iacSecurityTree);
        // Fill the view container to expose views for tests
        const viewContainer = this.viewManagerService.viewContainer;
        viewContainer.set(views_1.SNYK_VIEW_WELCOME, welcomeTree);
        vscode.workspace.onDidChangeWorkspaceFolders(e => {
            this.workspaceTrust.resetTrustedFoldersCache();
            e.removed.forEach(folder => {
                this.snykCode.resetResult(folder.uri.fsPath);
            });
            this.runScan(false);
        });
        this.editorsWatcher.activate(this);
        this.configurationWatcher.activate(this);
        this.snykCode.activateWebviewProviders();
        this.iacService.activateWebviewProviders();
        this.ossService.activateWebviewProviders();
        // noinspection ES6MissingAwait
        void this.notificationService.init();
        this.checkAdvancedMode().catch(err => errorReporter_1.ErrorReporter.capture(err));
        this.experimentService.load();
        this.initDependencyDownload();
        this.ossVulnerabilityCountService = new ossVulnerabilityCountService_1.OssVulnerabilityCountService(workspace_1.vsCodeWorkspace, window_1.vsCodeWindow, languages_1.vsCodeLanguages, new ossVulnerabilityCountProvider_1.OssVulnerabilityCountProvider(this.ossService, languageClientAdapter, new uri_1.UriAdapter(), new textdocument_1.TextDocumentAdapter()), this.ossService, logger_1.Logger, new editorDecorator_1.EditorDecorator(window_1.vsCodeWindow, languages_1.vsCodeLanguages, new theme_1.ThemeColorAdapter()), instance_1.configuration);
        this.ossVulnerabilityCountService.activate();
        // Wait for LS startup to finish before updating the codeEnabled context
        // The codeEnabled context depends on an LS command
        await this.languageServer.start();
        // feature flags depend on the language server
        this.featureFlagService = new featureFlagService_1.FeatureFlagService(commands_2.vsCodeCommands);
        await this.setupFeatureFlags();
        // Fetch feature flag to determine whether to use the new LSP-based rendering.
        // initialize contexts
        await this.contextService.setContext(views_1.SNYK_CONTEXT.INITIALIZED, true);
        // Actually start analysis
        this.runScan();
    }
    async deactivate() {
        this.ossVulnerabilityCountService.dispose();
        await this.languageServer.stop();
        await errorReporter_1.ErrorReporter.flush();
    }
    async restartLanguageServer() {
        await this.languageServer.stop();
        await this.languageServer.start();
    }
    initDependencyDownload() {
        this.downloadService.downloadOrUpdate().catch(err => {
            void errorHandler_1.ErrorHandler.handleGlobal(err, logger_1.Logger, this.contextService, this.loadingBadge);
        });
        return this.downloadService;
    }
    registerCommands(context) {
        context.subscriptions.push(vscode.commands.registerCommand(commands_1.SNYK_OPEN_BROWSER_COMMAND, (url) => this.commandController.openBrowser(url)), vscode.commands.registerCommand(commands_1.SNYK_OPEN_LOCAL_COMMAND, (path, range) => this.commandController.openLocal(path, range)), vscode.commands.registerCommand(commands_1.SNYK_INITIATE_LOGIN_COMMAND, () => this.commandController.initiateLogin()), vscode.commands.registerCommand(commands_1.SNYK_SET_TOKEN_COMMAND, () => this.commandController.setToken()), vscode.commands.registerCommand(commands_1.SNYK_CLEAR_PERSISTED_CACHE_COMMAND, async () => await this.cacheService.clearCache('', general_1.Persisted)), vscode.commands.registerCommand(commands_1.SNYK_ENABLE_CODE_COMMAND, () => this.commandController.executeCommand(commands_1.SNYK_ENABLE_CODE_COMMAND, () => this.enableCode())), vscode.commands.registerCommand(commands_1.SNYK_START_COMMAND, async () => {
            await vscode.commands.executeCommand(commands_1.SNYK_WORKSPACE_SCAN_COMMAND);
        }), vscode.commands.registerCommand(commands_1.SNYK_SETTINGS_COMMAND, () => this.commandController.openSettings()), vscode.commands.registerCommand(commands_1.SNYK_DCIGNORE_COMMAND, (custom, path) => this.commandController.createDCIgnore(custom, new uri_1.UriAdapter(), path)), vscode.commands.registerCommand(commands_1.SNYK_OPEN_ISSUE_COMMAND, (arg) => this.commandController.openIssueCommand(arg)), vscode.commands.registerCommand(commands_1.SNYK_SHOW_OUTPUT_COMMAND, () => this.commandController.showOutputChannel()), vscode.commands.registerCommand(commands_1.SNYK_SHOW_LS_OUTPUT_COMMAND, () => this.commandController.showLsOutputChannel()), vscode.commands.registerCommand(commands_1.SNYK_IGNORE_ISSUE_COMMAND, ignoreCommand_1.IgnoreCommand.ignoreIssues), vscode.commands.registerCommand(commands_1.SNYK_SET_BASE_BRANCH_COMMAND, (folderPath) => this.commandController.setBaseBranch(folderPath)), vscode.commands.registerCommand(commands_1.SNYK_SHOW_ERROR_FROM_CONTEXT_COMMAND, () => {
            const err = this.contextService.viewContext[views_1.SNYK_CONTEXT.ERROR];
            void vscode.window.showErrorMessage(err.message);
        }));
    }
}
exports.default = SnykExtension;
//# sourceMappingURL=extension.js.map