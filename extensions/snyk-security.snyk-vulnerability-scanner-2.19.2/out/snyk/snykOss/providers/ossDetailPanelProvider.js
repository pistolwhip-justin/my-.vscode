"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OssDetailPanelProvider = void 0;
const vscode = __importStar(require("vscode"));
const views_1 = require("../../common/constants/views");
const errorHandler_1 = require("../../common/error/errorHandler");
const nonce_1 = require("../../common/views/nonce");
const webviewPanelSerializer_1 = require("../../common/views/webviewPanelSerializer");
const webviewProvider_1 = require("../../common/views/webviewProvider");
const messages_1 = require("../constants/messages");
const fs_1 = require("fs");
const commands_1 = require("../../common/constants/commands");
class OssDetailPanelProvider extends webviewProvider_1.WebviewProvider {
    constructor(window, context, logger, languages, workspace, commandExecutor) {
        super(context, logger);
        this.window = window;
        this.context = context;
        this.logger = logger;
        this.languages = languages;
        this.workspace = workspace;
        this.commandExecutor = commandExecutor;
    }
    activate() {
        this.context.addDisposables(this.window.registerWebviewPanelSerializer(views_1.SNYK_VIEW_SUGGESTION_OSS, new webviewPanelSerializer_1.WebviewPanelSerializer(this)));
    }
    get openIssueId() {
        var _a;
        return (_a = this.issue) === null || _a === void 0 ? void 0 : _a.id;
    }
    async showPanel(issue) {
        var _a;
        try {
            await this.focusSecondEditorGroup();
            if (this.panel) {
                this.panel.reveal(vscode.ViewColumn.Two, true);
            }
            else {
                this.panel = vscode.window.createWebviewPanel(views_1.SNYK_VIEW_SUGGESTION_OSS, 'Snyk OSS Issue', {
                    viewColumn: vscode.ViewColumn.Two,
                    preserveFocus: true,
                }, this.getWebviewOptions());
                this.registerListeners();
            }
            const images = [
                ['icon-code', 'svg'],
                ['dark-critical-severity', 'svg'],
                ['dark-high-severity', 'svg'],
                ['dark-medium-severity', 'svg'],
                ['dark-low-severity', 'svg'],
                ['learn-icon', 'svg'],
            ].reduce((accumulator, [name, ext]) => {
                const uri = this.getWebViewUri('media', 'images', `${name}.${ext}`);
                if (!uri)
                    throw new Error('Image missing.');
                accumulator[name] = uri.toString();
                return accumulator;
            }, {});
            let html = '';
            // TODO: delete this when SNYK_GENERATE_ISSUE_DESCRIPTION command is in stable CLI.
            if (issue.additionalData.details) {
                html = issue.additionalData.details;
            }
            else {
                html = (_a = (await this.commandExecutor.executeCommand(commands_1.SNYK_GENERATE_ISSUE_DESCRIPTION, issue.id))) !== null && _a !== void 0 ? _a : '';
            }
            // Add the style
            const ideStylePath = vscode.Uri.joinPath(vscode.Uri.file(this.context.extensionPath), 'media', 'views', 'oss', 'suggestion', 'suggestion.css');
            const ideStyle = (0, fs_1.readFileSync)(ideStylePath.fsPath, 'utf8');
            const nonce = (0, nonce_1.getNonce)();
            html = html.replace('${ideStyle}', '<style nonce=${nonce}>' + ideStyle + '</style>');
            html = html.replaceAll('${nonce}', nonce);
            html = html.replaceAll(/\$\{\w+\}/g, '');
            this.panel.webview.html = html;
            this.panel.iconPath = vscode.Uri.joinPath(vscode.Uri.file(this.context.extensionPath), 'media', 'images', 'snyk-oss.svg');
            this.issue = issue;
        }
        catch (e) {
            errorHandler_1.ErrorHandler.handle(e, this.logger, messages_1.messages.errors.suggestionViewShowFailed);
        }
    }
    registerListeners() {
        if (!this.panel)
            return;
        this.panel.onDidDispose(() => this.onPanelDispose(), null, this.disposables);
        this.panel.onDidChangeViewState(() => this.checkVisibility(), undefined, this.disposables);
    }
    disposePanel() {
        super.disposePanel();
    }
    onPanelDispose() {
        super.onPanelDispose();
    }
}
exports.OssDetailPanelProvider = OssDetailPanelProvider;
//# sourceMappingURL=ossDetailPanelProvider.js.map