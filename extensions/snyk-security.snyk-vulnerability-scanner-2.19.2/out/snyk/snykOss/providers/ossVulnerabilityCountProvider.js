"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OssVulnerabilityCountProvider = void 0;
const cliService_1 = require("../../cli/services/cliService");
const types_1 = require("../../common/types");
const interfaces_1 = require("../interfaces");
class OssVulnerabilityCountProvider {
    constructor(ossService, languageClientAdapter, uriAdapter, textDocumentAdapter) {
        this.ossService = ossService;
        this.languageClientAdapter = languageClientAdapter;
        this.uriAdapter = uriAdapter;
        this.textDocumentAdapter = textDocumentAdapter;
        this.getResultArray = () => {
            if (!this.ossService.result) {
                return undefined;
            }
            const tempResultArray = [];
            const resultCache = new Map();
            for (const [, value] of this.ossService.result) {
                // value is Error
                if (value instanceof Error) {
                    tempResultArray.push(new cliService_1.CliError(value));
                }
                // value is Issue<T>[]
                else {
                    for (const issue of value) {
                        // try to access list of vulns for the current file
                        let res = resultCache.get(issue.filePath);
                        // add list of vulns to local cache if not there yet
                        if (res === undefined) {
                            res = {
                                path: issue.filePath,
                                vulnerabilities: [],
                                projectName: issue.additionalData.projectName,
                                displayTargetFile: issue.additionalData.displayTargetFile,
                                packageManager: issue.additionalData.packageManager,
                            };
                            resultCache.set(issue.filePath, res);
                        }
                        const tempVuln = (0, interfaces_1.convertIssue)(issue);
                        res.vulnerabilities.push(tempVuln);
                    }
                }
            }
            // copy cached results to final result array
            resultCache.forEach(value => tempResultArray.push(value));
            return tempResultArray;
        };
    }
    async getVulnerabilityCount(fileName, module, language, emitter) {
        let moduleVulnerabilityCount = {
            name: module.name,
            fileName: module.fileName,
            line: module.line,
            range: module.loc,
            hasCount: false,
        };
        const processFile = [types_1.Language.TypeScript, types_1.Language.JavaScript, types_1.Language.PJSON, types_1.Language.HTML].includes(language);
        if (processFile) {
            const uri = this.uriAdapter.file(fileName).toString();
            const doc = this.textDocumentAdapter.create(uri, (0, types_1.languageToString)(language), 1, '');
            let firstLine = 0;
            let lastLine = doc.lineCount;
            let firstCharacter = 0;
            let lastCharacter = Number.MAX_SAFE_INTEGER;
            if (module.loc) {
                firstLine = module.loc.start.line - 1;
                lastLine = module.loc.end.line - 1;
                firstCharacter = module.loc.start.column;
                lastCharacter = module.loc.end.column;
            }
            const param = {
                textDocument: { uri: doc.uri },
                range: {
                    start: { line: firstLine, character: firstCharacter },
                    end: { line: lastLine, character: lastCharacter },
                },
            };
            const inlineValues = await this.languageClientAdapter
                .getLanguageClient()
                .sendRequest('textDocument/inlineValue', param);
            if ((inlineValues === null || inlineValues === void 0 ? void 0 : inlineValues.length) > 0) {
                moduleVulnerabilityCount = {
                    name: module.name,
                    version: module.version,
                    fileName: module.fileName,
                    line: module.line,
                    range: module.loc,
                    count: inlineValues[0].text,
                    hasCount: true,
                };
            }
        }
        emitter === null || emitter === void 0 ? void 0 : emitter.scanned(moduleVulnerabilityCount);
        return moduleVulnerabilityCount;
    }
    isFilePartOfOssTest(filePath, ossFileResult) {
        if ((0, interfaces_1.isResultCliError)(ossFileResult)) {
            return false;
        }
        // File is considered to be part of OSS test if it has common root directory between OSS result path and filename path.
        // This is since package.json always lies in the root directory folder of a project.
        return filePath.startsWith(ossFileResult.path);
    }
}
exports.OssVulnerabilityCountProvider = OssVulnerabilityCountProvider;
//# sourceMappingURL=ossVulnerabilityCountProvider.js.map