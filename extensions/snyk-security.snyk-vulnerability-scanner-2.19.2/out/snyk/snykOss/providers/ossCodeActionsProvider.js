"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OssCodeActionsProvider = void 0;
const types_1 = require("../../common/commands/types");
const commands_1 = require("../../common/constants/commands");
const codeActionsProvider_1 = require("../../common/editor/codeActionsProvider");
const types_2 = require("../../common/languageServer/types");
const analysis_1 = require("../../snykCode/constants/analysis");
const ossIssueCommandHelper_1 = require("./ossIssueCommandHelper");
class OssCodeActionsProvider extends codeActionsProvider_1.CodeActionsProvider {
    constructor(languages, codeActionAdapter, codeActionKindAdapter, issues) {
        super(issues, codeActionKindAdapter);
        this.languages = languages;
        this.codeActionAdapter = codeActionAdapter;
    }
    provideCodeActions(document, _clickedRange, context) {
        // is there a better way to get the folder path?
        const folderPath = document.uri.fsPath.split('/').slice(0, -1).join('/');
        if (!folderPath) {
            return;
        }
        const vulnerabilities = this.getVulnerabilities(folderPath, context);
        if (!vulnerabilities) {
            return;
        }
        const mostSevereVulnerability = this.getMostSevereVulnerability(vulnerabilities, folderPath);
        if (!mostSevereVulnerability) {
            return;
        }
        return this.getActions(folderPath, document, mostSevereVulnerability, this.getIssueRange(mostSevereVulnerability));
    }
    getActions(_folderPath, _document, mostSevereVulnerability, _issueRange) {
        const openIssueAction = this.createMostSevereVulnerabilityAction(mostSevereVulnerability);
        // returns list of actions, all new actions should be added to this list
        return [openIssueAction];
    }
    // noop
    getIssueRange(_issue) {
        return this.languages.createRange(0, 0, 0, 0);
    }
    createMostSevereVulnerabilityAction(mostSevereVulnerability) {
        // create the CodeAction
        const openIssueAction = this.codeActionAdapter.create(`Show the most severe vulnerability [${mostSevereVulnerability.id}] (Snyk)`, this.providedCodeActionKinds[0]);
        openIssueAction.command = {
            command: commands_1.SNYK_OPEN_ISSUE_COMMAND,
            title: commands_1.SNYK_OPEN_ISSUE_COMMAND,
            arguments: [
                {
                    issueType: types_1.OpenCommandIssueType.OssVulnerability,
                    issue: mostSevereVulnerability,
                },
            ],
        };
        return openIssueAction;
    }
    issueSeverityToRanking(severity) {
        switch (severity) {
            case types_2.IssueSeverity.Critical:
                return 3;
            case types_2.IssueSeverity.High:
                return 2;
            case types_2.IssueSeverity.Medium:
                return 1;
            default:
                return 0;
        }
    }
    getVulnerabilities(folderPath, context) {
        // get all OSS vulnerabilities for the folder
        const ossResult = this.issues.get(folderPath);
        if (!ossResult || ossResult instanceof Error) {
            return;
        }
        // get all OSS diagnostics; these contain the relevant vulnerabilities
        const ossDiagnostics = context.diagnostics.filter(d => d.source === analysis_1.DIAGNOSTICS_OSS_COLLECTION_NAME_LS);
        if (!ossDiagnostics.length) {
            return;
        }
        // find the corresponding Issue<OssIssueData> objects from ossDiagnostics
        const vulnerabilities = [];
        for (const diagnostic of ossDiagnostics) {
            const vulnerability = ossResult.find(ossIssue => ossIssue.id === diagnostic.code.value);
            if (!vulnerability) {
                continue;
            }
            vulnerabilities.push(vulnerability);
        }
        return vulnerabilities;
    }
    getMostSevereVulnerability(vulnerabilities, folderPath) {
        // iterate vulnerabilities and get the most severe one
        // if there are multiple of the same severity, get the first one
        let highestSeverity = this.issueSeverityToRanking(types_2.IssueSeverity.Low);
        let mostSevereVulnerability;
        for (const vulnerability of vulnerabilities) {
            if (this.issueSeverityToRanking(vulnerability.severity) > highestSeverity) {
                highestSeverity = this.issueSeverityToRanking(vulnerability.severity);
                mostSevereVulnerability = vulnerability;
            }
        }
        if (!mostSevereVulnerability) {
            return;
        }
        return (0, ossIssueCommandHelper_1.getOssIssueCommandArg)(mostSevereVulnerability, folderPath, vulnerabilities);
    }
}
exports.OssCodeActionsProvider = OssCodeActionsProvider;
//# sourceMappingURL=ossCodeActionsProvider.js.map