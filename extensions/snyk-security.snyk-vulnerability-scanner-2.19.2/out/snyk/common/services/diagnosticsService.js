"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagnosticsIssueProvider = void 0;
const vscode = __importStar(require("vscode"));
const types_1 = require("../languageServer/types");
// This is a workaround until the LanguageClient package adds data to the Diagnostic type
// according to https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnostic
// Since 3.16 the property data was introduced
class Diagnostic316 extends vscode.Diagnostic {
}
class DiagnosticsIssueProvider {
    getIssuesFromDiagnostics(product) {
        const allDiagnostics = vscode.languages.getDiagnostics();
        const diagnosticsSource = this.productToLsProduct(product);
        // Filter and flatten the diagnostics list
        // Also filter only when diagnostic.data exists
        const filteredDiagnostics = allDiagnostics.flatMap(([_, diagnostics]) => {
            return diagnostics.filter((diagnostic) => diagnostic.source === diagnosticsSource && diagnostic.hasOwnProperty('data'));
        });
        const issues = filteredDiagnostics.map(diagnostic => diagnostic.data);
        return issues;
    }
    productToLsProduct(product) {
        switch (product) {
            case types_1.ScanProduct.Code:
                return types_1.LsScanProduct.Code;
            case types_1.ScanProduct.InfrastructureAsCode:
                return types_1.LsScanProduct.InfrastructureAsCode;
            case types_1.ScanProduct.OpenSource:
                return types_1.LsScanProduct.OpenSource;
            default:
                return types_1.LsScanProduct.Unknown;
        }
    }
}
exports.DiagnosticsIssueProvider = DiagnosticsIssueProvider;
//# sourceMappingURL=diagnosticsService.js.map