"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewManagerService = void 0;
const lodash_1 = __importDefault(require("lodash"));
const vscode_1 = require("vscode");
const instance_1 = require("../configuration/instance");
const general_1 = require("../constants/general");
class ViewContainer {
    constructor() {
        this.container = new Map();
    }
    get(key) {
        return this.container.get(key);
    }
    set(key, value) {
        this.container.set(key, value);
    }
}
class ViewManagerService {
    constructor() {
        // Avoid refreshing context/views too often:
        // https://github.com/Microsoft/vscode/issues/68424
        this.refreshCodeSecurityView = lodash_1.default.throttle(() => this.refreshCodeSecurityViewEmitter.fire(), general_1.REFRESH_VIEW_DEBOUNCE_INTERVAL, {
            leading: true,
        });
        this.refreshCodeQualityView = lodash_1.default.throttle(() => this.refreshCodeQualityViewEmitter.fire(), general_1.REFRESH_VIEW_DEBOUNCE_INTERVAL, {
            leading: true,
        });
        this.refreshOssView = lodash_1.default.throttle(() => this.refreshOssViewEmitter.fire(), general_1.REFRESH_VIEW_DEBOUNCE_INTERVAL, {
            leading: true,
        });
        this.refreshIacView = lodash_1.default.throttle(() => this.refreshIacViewEmitter.fire(), general_1.REFRESH_VIEW_DEBOUNCE_INTERVAL, {
            leading: true,
        });
        this.refreshCodeSecurityViewEmitter = new vscode_1.EventEmitter();
        this.refreshCodeQualityViewEmitter = new vscode_1.EventEmitter();
        this.refreshOssViewEmitter = new vscode_1.EventEmitter();
        this.viewContainer = new ViewContainer();
        this.refreshIacViewEmitter = new vscode_1.EventEmitter();
    }
    refreshAllViews() {
        this.refreshOssView();
        this.refreshAllCodeAnalysisViews();
        this.refreshIacView();
    }
    refreshAllCodeAnalysisViews() {
        this.refreshCodeSecurityView();
        this.refreshCodeQualityView();
    }
    refreshCodeAnalysisViews(enabledFeatures) {
        enabledFeatures = enabledFeatures !== null && enabledFeatures !== void 0 ? enabledFeatures : instance_1.configuration.getFeaturesConfiguration();
        if (!enabledFeatures) {
            return;
        }
        if (enabledFeatures.codeSecurityEnabled) {
            this.refreshCodeSecurityView();
        }
        if (enabledFeatures.codeQualityEnabled) {
            this.refreshCodeQualityView();
        }
    }
}
exports.ViewManagerService = ViewManagerService;
//# sourceMappingURL=viewManagerService.js.map