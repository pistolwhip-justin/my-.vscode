"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FolderConfigs = void 0;
class FolderConfigs {
    getFolderConfig(config, folderPath) {
        const folderConfigs = this.getFolderConfigs(config);
        return folderConfigs.find(i => i.folderPath === folderPath);
    }
    getFolderConfigs(config) {
        if (this.folderConfigsCache !== undefined) {
            return this.folderConfigsCache;
        }
        const folderConfigs = config.getFolderConfigs();
        this.folderConfigsCache = folderConfigs;
        return folderConfigs;
    }
    async setBranch(window, config, folderPath) {
        const folderConfig = this.getFolderConfig(config, folderPath);
        if (!folderConfig) {
            return;
        }
        const branchName = await window.showInputBox({
            placeHolder: '',
            validateInput: input => {
                var _a;
                const valid = this.validateBranchName(input, (_a = folderConfig.localBranches) !== null && _a !== void 0 ? _a : []);
                if (!valid) {
                    return "The chosen branch name doesn't exist.";
                }
            },
        });
        if (!branchName) {
            return;
        }
        folderConfig.baseBranch = branchName;
        await this.setFolderConfig(config, folderConfig);
    }
    validateBranchName(branchName, branchList) {
        return branchList.includes(branchName);
    }
    async setFolderConfig(config, folderConfig) {
        const currentFolderConfigs = this.getFolderConfigs(config);
        const finalFolderConfigs = currentFolderConfigs.map(i => i.folderPath === folderConfig.folderPath ? folderConfig : i);
        await config.setFolderConfigs(finalFolderConfigs);
    }
    resetFolderConfigsCache() {
        this.folderConfigsCache = undefined;
    }
}
exports.FolderConfigs = FolderConfigs;
//# sourceMappingURL=folderConfigs.js.map