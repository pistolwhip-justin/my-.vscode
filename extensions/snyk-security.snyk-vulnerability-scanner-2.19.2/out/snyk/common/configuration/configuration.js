"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = void 0;
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const url_1 = require("url");
const general_1 = require("../constants/general");
const settings_1 = require("../constants/settings");
const secretStorage_1 = __importDefault(require("../vscode/secretStorage"));
const NEWISSUES = 'Net new issues';
class Configuration {
    constructor(processEnv = process.env, workspace) {
        this.processEnv = processEnv;
        this.workspace = workspace;
        // These attributes are used in tests
        this.defaultSnykCodeBaseURL = 'https://deeproxy.snyk.io';
        this.defaultAuthHost = 'https://app.snyk.io';
        this.defaultApiEndpoint = 'https://api.snyk.io';
        this.featureFlag = {};
        this.getConfigName = (setting) => setting.replace(`${settings_1.CONFIGURATION_IDENTIFIER}.`, '');
    }
    getOssQuickFixCodeActionsEnabled() {
        var _a;
        return (_a = this.getPreviewFeatures().ossQuickfixes) !== null && _a !== void 0 ? _a : false;
    }
    getInsecure() {
        var _a;
        const strictSSL = (_a = this.workspace.getConfiguration('http', 'proxyStrictSSL')) !== null && _a !== void 0 ? _a : true;
        return !strictSSL;
    }
    static async getVersion() {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const { version } = await this.getPackageJsonConfig();
        return version;
    }
    static async isPreview() {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const { preview } = await this.getPackageJsonConfig();
        return preview;
    }
    getFeatureFlag(flagName) {
        var _a;
        return (_a = this.featureFlag[flagName]) !== null && _a !== void 0 ? _a : false;
    }
    setFeatureFlag(flagName, value) {
        this.featureFlag[flagName] = value;
    }
    static async getPackageJsonConfig() {
        return (await Promise.resolve(`${path_1.default.join('../../../..', 'package.json')}`).then(s => __importStar(require(s))));
    }
    get isDevelopment() {
        return !!this.processEnv.SNYK_VSCE_DEVELOPMENT;
    }
    get customEndpoint() {
        return this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_CUSTOM_ENDPOINT));
    }
    get authHost() {
        if (this.customEndpoint) {
            const url = new url_1.URL(this.customEndpoint);
            url.host = url.host.replace('api', 'app');
            return `${url.protocol}//${url.host}`;
        }
        return this.defaultAuthHost;
    }
    async setEndpoint(endpoint) {
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_CUSTOM_ENDPOINT), endpoint.toString(), true);
    }
    get isFedramp() {
        if (!this.customEndpoint)
            return false;
        // FEDRAMP URL e.g. https://api.feddramp.snykgov.io
        const endpoint = new url_1.URL(this.customEndpoint);
        // hostname validation
        const hostnameParts = endpoint.hostname.split('.');
        if (hostnameParts.length < 3)
            return false;
        return `${hostnameParts[2]}.${hostnameParts[3]}`.includes('snykgov.io');
    }
    get snykApiEndpoint() {
        if (this.customEndpoint) {
            return this.customEndpoint;
        }
        return this.defaultApiEndpoint;
    }
    get snykCodeUrl() {
        const authUrl = new url_1.URL(this.authHost);
        return `${authUrl.toString()}manage/snyk-code?from=vscode`;
    }
    getSnykLanguageServerPath() {
        return this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_CUSTOM_LS_PATH));
    }
    getDeltaFindingsEnabled() {
        const selectionValue = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.DELTA_FINDINGS));
        return selectionValue === NEWISSUES;
    }
    getAuthenticationMethod() {
        const setting = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_AUTHENTICATION_METHOD));
        if ((setting === null || setting === void 0 ? void 0 : setting.toLowerCase()) != 'token authentication') {
            return 'oauth';
        }
        else {
            return 'token';
        }
    }
    async getToken() {
        return new Promise(resolve => {
            secretStorage_1.default.instance
                .get(general_1.SNYK_TOKEN_KEY)
                .then(token => resolve(token))
                .catch(async (_) => {
                // clear the token and return empty string
                await this.clearToken();
                resolve('');
            });
        });
    }
    async setToken(token) {
        if (!token)
            return;
        return await secretStorage_1.default.instance.store(general_1.SNYK_TOKEN_KEY, token);
    }
    async setCliPath(cliPath) {
        if (!cliPath)
            return;
        return this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_CLI_PATH), cliPath, true);
    }
    async clearToken() {
        return new Promise((resolve, reject) => {
            secretStorage_1.default.instance
                .delete(general_1.SNYK_TOKEN_KEY)
                .then(() => resolve())
                .catch(error => {
                reject(error);
            });
        });
    }
    getFeaturesConfiguration() {
        const ossEnabled = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.OSS_ENABLED_SETTING));
        const codeSecurityEnabled = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.CODE_SECURITY_ENABLED_SETTING));
        const codeQualityEnabled = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.CODE_QUALITY_ENABLED_SETTING));
        const iacEnabled = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.IAC_ENABLED_SETTING));
        if (lodash_1.default.isUndefined(ossEnabled) &&
            lodash_1.default.isUndefined(codeSecurityEnabled) &&
            lodash_1.default.isUndefined(codeQualityEnabled) &&
            lodash_1.default.isUndefined(iacEnabled)) {
            // TODO: return 'undefined' to render feature selection screen once OSS integration is available
            return { ossEnabled: true, codeSecurityEnabled: true, codeQualityEnabled: true, iacEnabled: true };
        }
        return {
            ossEnabled,
            codeSecurityEnabled,
            codeQualityEnabled,
            iacEnabled,
        };
    }
    async setFeaturesConfiguration(config) {
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.OSS_ENABLED_SETTING), config === null || config === void 0 ? void 0 : config.ossEnabled, true);
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.CODE_SECURITY_ENABLED_SETTING), config === null || config === void 0 ? void 0 : config.codeSecurityEnabled, true);
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.CODE_QUALITY_ENABLED_SETTING), config === null || config === void 0 ? void 0 : config.codeQualityEnabled, true);
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.IAC_ENABLED_SETTING), config === null || config === void 0 ? void 0 : config.iacEnabled, true);
    }
    get shouldReportErrors() {
        return !!this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.YES_CRASH_REPORT_SETTING));
    }
    get shouldShowWelcomeNotification() {
        return !!this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.YES_WELCOME_NOTIFICATION_SETTING));
    }
    async hideWelcomeNotification() {
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.YES_WELCOME_NOTIFICATION_SETTING), false, true);
    }
    get shouldShowOssBackgroundScanNotification() {
        return !!this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.YES_BACKGROUND_OSS_NOTIFICATION_SETTING));
    }
    async hideOssBackgroundScanNotification() {
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.YES_BACKGROUND_OSS_NOTIFICATION_SETTING), false, true);
    }
    get shouldShowAdvancedView() {
        return !!this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_ADVANCED_MODE_SETTING));
    }
    get shouldAutoScanOss() {
        return !!this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_AUTOSCAN_OSS_SETTING));
    }
    get issueViewOptions() {
        const config = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ISSUE_VIEW_OPTIONS_SETTING));
        return (config !== null && config !== void 0 ? config : {
            openIssues: true,
            ignoredIssues: true,
        });
    }
    get severityFilter() {
        const config = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.SEVERITY_FILTER_SETTING));
        return (config !== null && config !== void 0 ? config : {
            critical: true,
            high: true,
            medium: true,
            low: true,
        });
    }
    get organization() {
        return this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_ORGANIZATION));
    }
    getPreviewFeatures() {
        const defaultSetting = {
            advisor: false,
            ossQuickfixes: false,
        };
        const userSetting = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.FEATURES_PREVIEW_SETTING)) || {};
        return {
            ...defaultSetting,
            ...userSetting,
        };
    }
    getAdditionalCliParameters() {
        return this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_ADDITIONAL_PARAMETERS_SETTING));
    }
    isAutomaticDependencyManagementEnabled() {
        return !!this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_AUTOMATIC_DEPENDENCY_MANAGEMENT));
    }
    getCliPath() {
        return this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_CLI_PATH));
    }
    getTrustedFolders() {
        return (this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.TRUSTED_FOLDERS)) || []);
    }
    getFolderConfigs() {
        return (this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.FOLDER_CONFIGS)) ||
            []);
    }
    get scanningMode() {
        return this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.SCANNING_MODE));
    }
    async setTrustedFolders(trustedFolders) {
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.TRUSTED_FOLDERS), trustedFolders, true);
    }
    async setFolderConfigs(folderConfigs) {
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.FOLDER_CONFIGS), folderConfigs, true);
    }
}
exports.Configuration = Configuration;
//# sourceMappingURL=configuration.js.map