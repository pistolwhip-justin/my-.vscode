"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductIssueTreeProvider = void 0;
const lodash_1 = __importStar(require("lodash"));
const vscode = __importStar(require("vscode")); // todo: invert dependency
const types_1 = require("../../common/languageServer/types");
const analysisMessages_1 = require("../../common/messages/analysisMessages");
const analysisTreeNodeProvider_1 = require("../../common/views/analysisTreeNodeProvider");
const treeNode_1 = require("../../common/views/treeNode");
const commands_1 = require("../constants/commands");
class ProductIssueTreeProvider extends analysisTreeNodeProvider_1.AnalysisTreeNodeProvider {
    constructor(contextService, productService, configuration, languages, folderConfigs) {
        super(configuration, productService);
        this.contextService = contextService;
        this.productService = productService;
        this.configuration = configuration;
        this.languages = languages;
        this.folderConfigs = folderConfigs;
    }
    static getSeverityIcon(severity) {
        return ({
            [types_1.IssueSeverity.Critical]: treeNode_1.NODE_ICONS.critical,
            [types_1.IssueSeverity.High]: treeNode_1.NODE_ICONS.high,
            [types_1.IssueSeverity.Medium]: treeNode_1.NODE_ICONS.medium,
            [types_1.IssueSeverity.Low]: treeNode_1.NODE_ICONS.low,
        }[severity] || treeNode_1.NODE_ICONS.low);
    }
    getRootChildren() {
        const nodes = [];
        if (!this.shouldShowTree())
            return nodes;
        if (!this.productService.isLsDownloadSuccessful) {
            return [this.getErrorEncounteredTreeNode()];
        }
        if (!this.productService.isAnyWorkspaceFolderTrusted) {
            return [this.getNoWorkspaceTrustTreeNode()];
        }
        if (this.productService.isAnalysisRunning) {
            return [
                new treeNode_1.TreeNode({
                    text: analysisMessages_1.messages.scanRunning,
                }),
            ];
        }
        if (!this.productService.isAnyResultAvailable()) {
            return [
                new treeNode_1.TreeNode({
                    text: this.getRunTestMessage(),
                }),
            ];
        }
        nodes.push(...this.getResultNodes());
        const folderResults = Array.from(this.productService.result.values());
        const allFailed = folderResults.every(folderResult => folderResult instanceof Error);
        if (allFailed) {
            return nodes;
        }
        nodes.sort(this.compareNodes);
        const totalIssueCount = this.getTotalIssueCount();
        const ignoredIssueCount = this.getIgnoredCount();
        const topNodes = [
            new treeNode_1.TreeNode({
                text: this.getIssueFoundText(totalIssueCount, ignoredIssueCount),
            }),
        ];
        if (totalIssueCount > 0) {
            topNodes.push(this.getFixableIssuesNode(this.getFixableCount()));
        }
        const noSeverityFiltersSelectedWarning = this.getNoSeverityFiltersSelectedTreeNode();
        if (noSeverityFiltersSelectedWarning !== null) {
            topNodes.push(noSeverityFiltersSelectedWarning);
        }
        else {
            const noIssueViewOptionSelectedWarning = this.getNoIssueViewOptionsSelectedTreeNode(totalIssueCount, ignoredIssueCount);
            topNodes.push(noIssueViewOptionSelectedWarning);
        }
        const validTopNodes = topNodes.filter((n) => n !== null);
        const baseBranchNodeIndex = nodes.findIndex(node => {
            const label = node.label;
            return (label === null || label === void 0 ? void 0 : label.toLowerCase().indexOf('base branch')) !== -1;
        });
        if (baseBranchNodeIndex > -1) {
            nodes.splice(baseBranchNodeIndex + 1, 0, ...validTopNodes);
        }
        else {
            nodes.unshift(...validTopNodes);
        }
        return nodes;
    }
    getFixableIssuesNode(_fixableIssueCount) {
        return null; // optionally overridden by products
    }
    getFilteredIssues() {
        const folderResults = Array.from(this.productService.result.values());
        const successfulResults = (0, lodash_1.flatten)(folderResults.filter((result) => Array.isArray(result)));
        return this.filterIssues(successfulResults);
    }
    getTotalIssueCount() {
        return this.getFilteredIssues().length;
    }
    getFixableCount() {
        return this.getFilteredIssues().filter(issue => this.isFixableIssue(issue)).length;
    }
    getIgnoredCount() {
        const ignoredIssues = this.getFilteredIssues().filter(issue => issue.isIgnored);
        return ignoredIssues.length;
    }
    isFixableIssue(_issue) {
        return false; // optionally overridden by products
    }
    filterVisibleIssues(issues) {
        return issues.filter(issue => this.isVisibleIssue(issue, this.configuration.issueViewOptions));
    }
    isVisibleIssue(issue, issueViewOptions) {
        const { ignoredIssues: includeIgnoredIssues, openIssues: includeOpenIssues } = issueViewOptions;
        // Show all issues
        if (includeIgnoredIssues && includeOpenIssues) {
            return true;
        }
        // Show issues based on options
        if (includeIgnoredIssues) {
            return issue.isIgnored;
        }
        if (includeOpenIssues) {
            return !issue.isIgnored;
        }
        return false;
    }
    getBaseBranch(folderPath) {
        const deltaFindingsEnabled = this.configuration.getDeltaFindingsEnabled();
        const config = this.folderConfigs.getFolderConfig(this.configuration, folderPath);
        if (deltaFindingsEnabled && config) {
            return new treeNode_1.TreeNode({
                text: 'Base branch: ' + config.baseBranch,
                icon: treeNode_1.NODE_ICONS.branch,
                command: {
                    command: commands_1.SNYK_SET_BASE_BRANCH_COMMAND,
                    title: 'Choose Base Branch',
                    arguments: [folderPath],
                },
            });
        }
    }
    getResultNodes() {
        const nodes = [];
        for (const result of this.productService.result.entries()) {
            const folderPath = result[0];
            const folderResult = result[1];
            const uri = vscode.Uri.file(folderPath);
            const shortFolderPath = uri.path.split('/');
            // TODO: this might need to be changed to uri.fspath
            const folderName = shortFolderPath.pop() || uri.path;
            let folderVulnCount = 0;
            if (folderResult instanceof Error && folderResult.message === types_1.LsErrorMessage.repositoryInvalidError) {
                nodes.push(this.getFaultyRepositoryErrorTreeNode(folderName, folderResult.toString()));
                continue;
            }
            if (folderResult instanceof Error) {
                nodes.push(this.getErrorEncounteredTreeNode(folderName));
                continue;
            }
            const folderSeverityCounts = this.initSeverityCounts();
            const fileNodes = [];
            const fileVulns = lodash_1.default.groupBy(folderResult, v => v.filePath);
            for (const file in fileVulns) {
                const fileIssues = fileVulns[file];
                const uri = vscode.Uri.file(file);
                const filePath = uri.path.split('/');
                const filename = filePath.pop() || uri.path;
                const dir = filePath.pop();
                const fileSeverityCounts = this.initSeverityCounts();
                const filteredIssues = this.filterIssues(fileIssues);
                const visibleIssues = this.filterVisibleIssues(filteredIssues);
                const issueNodes = visibleIssues.map(issue => {
                    fileSeverityCounts[issue.severity] += 1;
                    folderVulnCount++;
                    const issueRange = this.getIssueRange(issue);
                    const params = {
                        text: this.getIssueTitle(issue),
                        icon: ProductIssueTreeProvider.getSeverityIcon(issue.severity),
                        issue: {
                            uri,
                            filePath: file,
                            range: issueRange,
                        },
                        internal: {
                            severity: ProductIssueTreeProvider.getSeverityComparatorIndex(issue.severity),
                        },
                        command: this.getOpenIssueCommand(issue, folderPath, file),
                    };
                    return new treeNode_1.TreeNode(params);
                });
                if (issueNodes.length === 0) {
                    continue;
                }
                issueNodes.sort(this.compareNodes);
                const fileSeverity = ProductIssueTreeProvider.getHighestSeverity(fileSeverityCounts);
                folderSeverityCounts[fileSeverity] += 1;
                // append file node
                const fileNode = new treeNode_1.TreeNode({
                    text: filename,
                    description: this.getIssueDescriptionText(dir, issueNodes.length),
                    icon: ProductIssueTreeProvider.getSeverityIcon(fileSeverity),
                    children: issueNodes,
                    internal: {
                        nIssues: issueNodes.length,
                        severity: ProductIssueTreeProvider.getSeverityComparatorIndex(fileSeverity),
                    },
                });
                fileNodes.push(fileNode);
            }
            fileNodes.sort(this.compareNodes);
            const folderSeverity = ProductIssueTreeProvider.getHighestSeverity(folderSeverityCounts);
            const baseBranchNode = this.getBaseBranch(uri.fsPath);
            if (folderVulnCount == 0) {
                this.addBaseBranchNode(baseBranchNode, nodes);
                continue;
            }
            // flatten results if single workspace folder
            if (this.productService.result.size === 1) {
                this.addBaseBranchNode(baseBranchNode, nodes);
                nodes.push(...fileNodes);
            }
            else {
                const folderNode = new treeNode_1.TreeNode({
                    text: folderName,
                    description: this.getIssueDescriptionText(folderName, folderVulnCount),
                    icon: ProductIssueTreeProvider.getSeverityIcon(folderSeverity),
                    children: fileNodes,
                    internal: {
                        nIssues: folderVulnCount,
                        severity: ProductIssueTreeProvider.getSeverityComparatorIndex(folderSeverity),
                    },
                });
                this.addBaseBranchNode(baseBranchNode, fileNodes);
                nodes.push(folderNode);
            }
        }
        return nodes;
    }
    addBaseBranchNode(baseBranchNode, nodes) {
        if (!baseBranchNode) {
            return;
        }
        nodes.unshift(baseBranchNode);
    }
    getIssueFoundText(nIssues, _) {
        if (!nIssues) {
            return '✅ Congrats! No issues found!';
        }
        return `Snyk found ${nIssues} issue${nIssues === 1 ? '' : 's'}`;
    }
    getIssueDescriptionText(dir, issueCount) {
        return `${dir} - ${issueCount} issue${issueCount === 1 ? '' : 's'}`;
    }
    static getHighestSeverity(counts) {
        for (const s of [types_1.IssueSeverity.Critical, types_1.IssueSeverity.High, types_1.IssueSeverity.Medium, types_1.IssueSeverity.Low]) {
            if (counts[s])
                return s;
        }
        return types_1.IssueSeverity.Low;
    }
    initSeverityCounts() {
        return {
            [types_1.IssueSeverity.Critical]: 0,
            [types_1.IssueSeverity.High]: 0,
            [types_1.IssueSeverity.Medium]: 0,
            [types_1.IssueSeverity.Low]: 0,
        };
    }
    /** Returns severity significance index. The higher, the more significant severity is. */
    static getSeverityComparatorIndex(severity) {
        return Object.values(types_1.IssueSeverity).indexOf(severity);
    }
}
exports.ProductIssueTreeProvider = ProductIssueTreeProvider;
//# sourceMappingURL=issueTreeProvider.js.map